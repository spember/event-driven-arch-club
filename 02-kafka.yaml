---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-broker
  name: kafka-service
  namespace: kafka
spec:
  type: LoadBalancer
  ports:
  - port: 9092
  selector:
    app: kafka-broker
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-broker
  name: kafka-localhost
  namespace: kafka
spec:
  type: LoadBalancer
  ports:
  - port: 19092
  selector:
    app: kafka-broker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka-broker
  name: kafka-broker
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-broker
  template:
    metadata:
      labels:
        app: kafka-broker
    spec:
      hostname: kafka-broker
      containers:
      - env:
        - name: KAFKA_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper-service:2181
        - name: KAFKA_LISTENERS
          value: PLAINTEXT://:9092,CONNECTIONS_FROM_HOST://:19092
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://$(KAFKA_POD_IP):9092,CONNECTIONS_FROM_HOST://localhost:19092
          # other microservices should reference the service as their source, they will in turn receive the pod ip
          # this is not a long term solution, something like a Stateful set should be used but this is fine for playing around
          # Connections from host should allow us to fire messages with minikube tunnel + kcat
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT

        image: bitnami/kafka
        imagePullPolicy: IfNotPresent
        name: kafka-broker
        ports:
        - containerPort: 9092
        - containerPort: 19092
